{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://github.com/torabian/emi/lib/core/emi",
  "$ref": "#/definitions/Emi",
  "definitions": {
    "Emi": {
      "properties": {
        "namespace": {
          "type": "string",
          "description": "Represents where is the location of the module in app tree. Similar to PHP namespacing sytem it be used to explicitly as export path of the actions for client frameworks"
        },
        "description": {
          "type": "string",
          "description": "Description of module and it's purpose. Used in code gen and creating documents."
        },
        "version": {
          "type": "string",
          "description": "Version of the module. Helpful for different code generation phases but it's not necessary."
        },
        "name": {
          "type": "string",
          "description": "Name of the module. Needs to be lower camel case and Module.go and Module.dyno.go will be generated based on this name."
        },
        "enums": {
          "items": {
            "$ref": "#/definitions/EmiEnum"
          },
          "type": "array",
          "description": "Module level enums which can be used across the other parts of generated code."
        },
        "dtos": {
          "items": {
            "$ref": "#/definitions/EmiDto"
          },
          "type": "array",
          "description": "Dtos are basically golang structs with some additional functionality which can be used for request/response actions"
        },
        "complexes": {
          "items": {
            "$ref": "#/definitions/EmiComplex"
          },
          "type": "array",
          "description": "Complex custom data types definitions and location"
        },
        "actions": {
          "items": {
            "$ref": "#/definitions/EmiAction"
          },
          "type": "array",
          "description": "Actions are similar to controllers in other frameworks. They are custom functionality available via CLI or Http requests and developer need to implement their logic"
        },
        "remotes": {
          "items": {
            "$ref": "#/definitions/EmiRemote"
          },
          "type": "array",
          "description": "Remotes are definition of external services which could be contacted via http and Emi developer can make them typesafe by defining them here."
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "EmiAction": {
      "properties": {
        "name": {
          "type": "string",
          "description": "General name of the action used for generating code and CLI commands"
        },
        "cliName": {
          "type": "string",
          "description": "Overrides the CLI action name if specified otherwise defaults to Name"
        },
        "actionAliases": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "CLI command aliases for shorter action names"
        },
        "url": {
          "type": "string",
          "description": "HTTP route of the action; if not specified the action is CLI-only"
        },
        "method": {
          "type": "string",
          "enum": [
            "post",
            "patch",
            "put",
            "get",
            "delete",
            "webrtc",
            "reactive",
            "sse"
          ],
          "description": "HTTP method type including standard and Emi-specific methods"
        },
        "binaryType": {
          "type": "string",
          "enum": [
            "text",
            "arraybuffer",
            "blob"
          ],
          "description": "Text by default for websocket"
        },
        "qs": {
          "items": {
            "$ref": "#/definitions/EmiField"
          },
          "type": "array",
          "description": "Type-safe query parameters for CLI and HTTP requests"
        },
        "description": {
          "type": "string",
          "description": "Action description used in API specs and documentation"
        },
        "in": {
          "$ref": "#/definitions/EmiActionBody",
          "description": "Request body definition similar to HTTP request body"
        },
        "out": {
          "$ref": "#/definitions/EmiActionBody",
          "description": "Response body definition similar to HTTP response body"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "EmiActionBody": {
      "properties": {
        "headers": {
          "items": {
            "$ref": "#/definitions/EmiHeader"
          },
          "type": "array",
          "description": "Typesafe headers."
        },
        "envelope": {
          "type": "string",
          "description": "Envelop the content"
        },
        "fields": {
          "items": {
            "$ref": "#/definitions/EmiField"
          },
          "type": "array"
        },
        "dto": {
          "type": "string"
        },
        "primitive": {
          "type": "string"
        },
        "xhtml": {
          "type": "boolean"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "EmiComplex": {
      "properties": {
        "name": {
          "type": "string",
          "description": " Name of the complex class or struct"
        },
        "location": {
          "type": "string",
          "description": " Location of the definition"
        },
        "compiler": {
          "type": "string",
          "description": " Different compilers can import the definition from different locations"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "EmiDto": {
      "properties": {
        "description": {
          "type": "string",
          "description": "Description about the purpose of the dto. It will be used in CLI and codegen documentation."
        },
        "name": {
          "type": "string",
          "description": "Name of the dto in camel case the rest of the code related to this dto is being generated based on this"
        },
        "fields": {
          "items": {
            "$ref": "#/definitions/EmiField"
          },
          "type": "array",
          "description": "List of fields and body definitions of the dto"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "EmiEnum": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the enum in camel case the rest of the code related to this enum is being generated based on this"
        },
        "fields": {
          "items": {
            "$ref": "#/definitions/EmiEnumInline"
          },
          "type": "array",
          "description": "Define the enum fields as an array"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "EmiEnumInline": {
      "properties": {
        "k": {
          "type": "string",
          "description": "Enum key which will be used in golang generation and validation"
        },
        "description": {
          "type": "string",
          "description": "Description of the enum for developers. It's not translated or meant to be shown to end users."
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "EmiField": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the field in camel case. Will be upper case automatically when necessary"
        },
        "recommended": {
          "type": "boolean",
          "description": "Recommended field will be asked upon an interactive cli operation."
        },
        "description": {
          "type": "string",
          "description": "Description about the field for developers and generated documents."
        },
        "type": {
          "type": "string",
          "enum": [
            "array",
            "slice",
            "one",
            "collection",
            "object",
            "enum",
            "string",
            "bool",
            "int",
            "int32",
            "int64",
            "float32",
            "float64",
            "array?",
            "slice?",
            "one?",
            "collection?",
            "object?",
            "enum?",
            "string?",
            "bool?",
            "int?",
            "int32?",
            "int64?",
            "float32?",
            "float64?",
            "any",
            "complex"
          ],
          "description": "Type of the field based on Emi types."
        },
        "primitive": {
          "type": "string",
          "description": "Primitive type in golang when type: slice is set"
        },
        "target": {
          "type": "string",
          "description": "The entity in golang which will be operated on in case of type: one or type: collection"
        },
        "default": {
          "description": "Default value of the field which will be added to the meta tags"
        },
        "module": {
          "type": "string",
          "description": "When using one or collection types you need to set the module name here to import tha"
        },
        "provider": {
          "type": "string",
          "description": "The go project module of the important target for one or collection fields if its from exte"
        },
        "json": {
          "type": "string",
          "description": "The json tag of the generated field. Defaults to the name but can be overwritten"
        },
        "yaml": {
          "type": "string",
          "description": "The yaml tag of the generated field. Defaults to the name but can be overwritten"
        },
        "xml": {
          "type": "string",
          "description": "The xml tag of the generated field. Defaults to the name but can be overwritten"
        },
        "of": {
          "items": {
            "$ref": "#/definitions/EmiEnumInline"
          },
          "type": "array",
          "description": "List of enum values in case of enum type for the field. Check EmiEnumInline for more d"
        },
        "complex": {
          "type": "string",
          "description": "In case of complex data type"
        },
        "matches": {
          "items": {
            "$ref": "#/definitions/EmiFieldMatch"
          },
          "type": "array",
          "description": "On the json type this field will generate necessary code to cast it into different dtos"
        },
        "fields": {
          "items": {
            "$ref": "#/definitions/EmiField"
          },
          "type": "array",
          "description": "For types such as array or object children fields can be defined and will separate struct with name prefixed to parent"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "EmiFieldMatch": {
      "properties": {
        "dto": {
          "type": "string",
          "description": "The dto name from Emi which will be matched. Might be also work with any other go struct but check the generated code."
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "EmiHeader": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the header accessible on programming languages"
        },
        "type": {
          "type": "string",
          "enum": [
            "string",
            "int64",
            "float64",
            "bool"
          ],
          "description": "Value type"
        },
        "description": {
          "type": "string",
          "description": "Description of the value and reason usually to developers"
        }
      },
      "additionalProperties": false,
      "type": "object"
    },
    "EmiRemote": {
      "properties": {
        "name": {
          "type": "string",
          "description": "Remote action name"
        },
        "method": {
          "type": "string",
          "enum": [
            "get",
            "post",
            "put",
            "delete",
            "patch",
            "options",
            "head"
          ],
          "description": "Standard HTTP methods"
        },
        "url": {
          "type": "string",
          "description": "The url which will be requested. You need to add full url here"
        },
        "out": {
          "$ref": "#/definitions/EmiActionBody",
          "description": "Standard EmiActionBody object. Could have fields"
        },
        "in": {
          "$ref": "#/definitions/EmiActionBody",
          "description": "Standard EmiActionBody object. Could have fields entity dto as content and you can define the input parameters as struct in Go and Emi will convert it into json."
        },
        "query": {
          "items": {
            "$ref": "#/definitions/EmiField"
          },
          "type": "array",
          "description": "Query params for the address if you want to define them in Golang dynamically instead of URL."
        }
      },
      "additionalProperties": false,
      "type": "object"
    }
  }
}