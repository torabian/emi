"use strict";(self.webpackChunkemi_web=self.webpackChunkemi_web||[]).push([[371],{8066:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>r,contentTitle:()=>i,default:()=>f,frontMatter:()=>s,metadata:()=>a,toc:()=>u});const a=JSON.parse('{"id":"js/emi-float64-data-type","title":"Emi float64 data type","description":"Example schema:","source":"@site/docs/js/emi-float64-data-type.mdx","sourceDirName":"js","slug":"/js/emi-float64-data-type","permalink":"/emi/docs/js/emi-float64-data-type","draft":false,"unlisted":false,"editUrl":"https://github.com/torabian/emi/tree/main/emi-web/docs/js/emi-float64-data-type.mdx","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"Emi integer data type","permalink":"/emi/docs/js/emi-int-data-type"},"next":{"title":"Emi object data type","permalink":"/emi/docs/js/emi-object-data-type"}}');var l=e(4848),o=e(8453);const s={sidebar_position:7},i="Emi float64 data type",r={},u=[];function c(n){const t={blockquote:"blockquote",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...n.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(t.header,{children:(0,l.jsx)(t.h1,{id:"emi-float64-data-type",children:"Emi float64 data type"})}),"\n",(0,l.jsx)(t.p,{children:"Example schema:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-yaml",children:"name: MyFloatClass\nfields:\n  - name: floatWithDefault\n    default: 3.14\n    type: float64\n  - name: plainFloat\n    type: float64\n\n"})}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"float64"})," maps to JavaScript ",(0,l.jsx)(t.code,{children:"number"})," with double precision."]}),"\n",(0,l.jsxs)(t.li,{children:["Default is ",(0,l.jsx)(t.code,{children:"0.0"})," if not specified."]}),"\n",(0,l.jsxs)(t.li,{children:[(0,l.jsx)(t.code,{children:"float64?"})," allows ",(0,l.jsx)(t.code,{children:"null"})," and ",(0,l.jsx)(t.code,{children:"undefined"}),", defaulting to ",(0,l.jsx)(t.code,{children:"undefined"}),"."]}),"\n"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-ts",children:'/**\n * The base class definition for myFloatClassDto\n **/\nexport class MyFloatClassDto {\n  /**\n   *\n   * @type {number}\n   **/\n  #floatWithDefault: number = 3.14;\n  /**\n   *\n   * @returns {number}\n   **/\n  get floatWithDefault() {\n    return this.#floatWithDefault;\n  }\n  /**\n   *\n   * @type {number}\n   **/\n  set floatWithDefault(value: number) {}\n  setFloatWithDefault(value: number) {\n    this.floatWithDefault = value;\n    return this;\n  }\n  /**\n   *\n   * @type {number}\n   **/\n  #plainFloat: number = 0.0;\n  /**\n   *\n   * @returns {number}\n   **/\n  get plainFloat() {\n    return this.#plainFloat;\n  }\n  /**\n   *\n   * @type {number}\n   **/\n  set plainFloat(value: number) {}\n  setPlainFloat(value: number) {\n    this.plainFloat = value;\n    return this;\n  }\n  constructor(data: unknown = undefined) {\n    if (data === null || data === undefined) {\n      return;\n    }\n    if (typeof data === "string") {\n      this.applyFromObject(JSON.parse(data));\n    } else if (this.#isJsonAppliable(data)) {\n      this.applyFromObject(data);\n    } else {\n      throw new Error(\n        "Instance cannot be created on an unknown value, check the content being passed. got: " +\n          typeof data,\n      );\n    }\n  }\n  #isJsonAppliable(obj: unknown) {\n    const g = globalThis as any;\n    const isBuffer =\n      typeof g.Buffer !== "undefined" &&\n      typeof g.Buffer.isBuffer === "function" &&\n      g.Buffer.isBuffer(obj);\n    const isBlob = typeof g.Blob !== "undefined" && obj instanceof g.Blob;\n    return (\n      obj &&\n      typeof obj === "object" &&\n      !Array.isArray(obj) &&\n      !isBuffer &&\n      !(obj instanceof ArrayBuffer) &&\n      !isBlob\n    );\n  }\n  /**\n   * casts the fields of a javascript object into the class properties one by one\n   **/\n  applyFromObject(data = {}) {\n    const d = data as Partial<MyFloatClassDto>;\n    if (d.floatWithDefault !== undefined) {\n      this.floatWithDefault = d.floatWithDefault;\n    }\n    if (d.plainFloat !== undefined) {\n      this.plainFloat = d.plainFloat;\n    }\n  }\n  /**\n   *\tSpecial toJSON override, since the field are private,\n   *\tJson stringify won\'t see them unless we mention it explicitly.\n   **/\n  toJSON() {\n    return {\n      floatWithDefault: this.#floatWithDefault,\n      plainFloat: this.#plainFloat,\n    };\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  static get Fields() {\n    return {\n      floatWithDefault: "floatWithDefault",\n      plainFloat: "plainFloat",\n    };\n  }\n  /**\n   * Creates an instance of MyFloatClassDto, and possibleDtoObject\n   * needs to satisfy the type requirement fully, otherwise typescript compile would\n   * be complaining.\n   **/\n  static from(possibleDtoObject: MyFloatClassDtoType) {\n    return new MyFloatClassDto(possibleDtoObject);\n  }\n  /**\n   * Creates an instance of MyFloatClassDto, and partialDtoObject\n   * needs to satisfy the type, but partially, and rest of the content would\n   * be constructed according to data types and nullability.\n   **/\n  static with(partialDtoObject: PartialDeep<MyFloatClassDtoType>) {\n    return new MyFloatClassDto(partialDtoObject);\n  }\n  copyWith(\n    partial: PartialDeep<MyFloatClassDtoType>,\n  ): InstanceType<typeof MyFloatClassDto> {\n    return new MyFloatClassDto({ ...this.toJSON(), ...partial });\n  }\n  clone(): InstanceType<typeof MyFloatClassDto> {\n    return new MyFloatClassDto(this.toJSON());\n  }\n}\nexport abstract class MyFloatClassDtoFactory {\n  abstract create(data: unknown): MyFloatClassDto;\n}\ntype PartialDeep<T> = {\n  [P in keyof T]?: T[P] extends Array<infer U>\n    ? Array<PartialDeep<U>>\n    : T[P] extends object\n      ? PartialDeep<T[P]>\n      : T[P];\n};\n/**\n * The base type definition for myFloatClassDto\n **/\nexport type MyFloatClassDtoType = {\n  /**\n   *\n   * @type {number}\n   **/\n  floatWithDefault: number;\n  /**\n   *\n   * @type {number}\n   **/\n  plainFloat: number;\n};\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace MyFloatClassDtoType {}\n\n'})}),"\n",(0,l.jsx)(t.p,{children:"Nullable version:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-yaml",children:"name: MyFloatClass\nfields:\n  - name: nullableFloatWithDefault\n    default: 1.23\n    type: float64?\n  - name: nullableFloatWithoutDefault\n    type: float64?\n\n"})}),"\n",(0,l.jsxs)(t.p,{children:["Defaults to ",(0,l.jsx)(t.code,{children:"undefined"}),", but you can assign any float value or ",(0,l.jsx)(t.code,{children:"null"}),"."]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-ts",children:'/**\n * The base class definition for myFloatClassDto\n **/\nexport class MyFloatClassDto {\n  /**\n   *\n   * @type {number}\n   **/\n  #nullableFloatWithDefault?: number | null = 1.23;\n  /**\n   *\n   * @returns {number}\n   **/\n  get nullableFloatWithDefault() {\n    return this.#nullableFloatWithDefault;\n  }\n  /**\n   *\n   * @type {number}\n   **/\n  set nullableFloatWithDefault(value: number | null | undefined) {\n    const correctType =\n      typeof value === "number" || value === undefined || value === null;\n    const parsedValue = correctType ? value : Number(value);\n    if (!Number.isNaN(parsedValue)) {\n      this.#nullableFloatWithDefault = parsedValue;\n    }\n  }\n  setNullableFloatWithDefault(value: number | null | undefined) {\n    this.nullableFloatWithDefault = value;\n    return this;\n  }\n  /**\n   *\n   * @type {number}\n   **/\n  #nullableFloatWithoutDefault?: number | null = undefined;\n  /**\n   *\n   * @returns {number}\n   **/\n  get nullableFloatWithoutDefault() {\n    return this.#nullableFloatWithoutDefault;\n  }\n  /**\n   *\n   * @type {number}\n   **/\n  set nullableFloatWithoutDefault(value: number | null | undefined) {\n    const correctType =\n      typeof value === "number" || value === undefined || value === null;\n    const parsedValue = correctType ? value : Number(value);\n    if (!Number.isNaN(parsedValue)) {\n      this.#nullableFloatWithoutDefault = parsedValue;\n    }\n  }\n  setNullableFloatWithoutDefault(value: number | null | undefined) {\n    this.nullableFloatWithoutDefault = value;\n    return this;\n  }\n  constructor(data: unknown = undefined) {\n    if (data === null || data === undefined) {\n      return;\n    }\n    if (typeof data === "string") {\n      this.applyFromObject(JSON.parse(data));\n    } else if (this.#isJsonAppliable(data)) {\n      this.applyFromObject(data);\n    } else {\n      throw new Error(\n        "Instance cannot be created on an unknown value, check the content being passed. got: " +\n          typeof data,\n      );\n    }\n  }\n  #isJsonAppliable(obj: unknown) {\n    const g = globalThis as any;\n    const isBuffer =\n      typeof g.Buffer !== "undefined" &&\n      typeof g.Buffer.isBuffer === "function" &&\n      g.Buffer.isBuffer(obj);\n    const isBlob = typeof g.Blob !== "undefined" && obj instanceof g.Blob;\n    return (\n      obj &&\n      typeof obj === "object" &&\n      !Array.isArray(obj) &&\n      !isBuffer &&\n      !(obj instanceof ArrayBuffer) &&\n      !isBlob\n    );\n  }\n  /**\n   * casts the fields of a javascript object into the class properties one by one\n   **/\n  applyFromObject(data = {}) {\n    const d = data as Partial<MyFloatClassDto>;\n    if (d.nullableFloatWithDefault !== undefined) {\n      this.nullableFloatWithDefault = d.nullableFloatWithDefault;\n    }\n    if (d.nullableFloatWithoutDefault !== undefined) {\n      this.nullableFloatWithoutDefault = d.nullableFloatWithoutDefault;\n    }\n  }\n  /**\n   *\tSpecial toJSON override, since the field are private,\n   *\tJson stringify won\'t see them unless we mention it explicitly.\n   **/\n  toJSON() {\n    return {\n      nullableFloatWithDefault: this.#nullableFloatWithDefault,\n      nullableFloatWithoutDefault: this.#nullableFloatWithoutDefault,\n    };\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  static get Fields() {\n    return {\n      nullableFloatWithDefault: "nullableFloatWithDefault",\n      nullableFloatWithoutDefault: "nullableFloatWithoutDefault",\n    };\n  }\n  /**\n   * Creates an instance of MyFloatClassDto, and possibleDtoObject\n   * needs to satisfy the type requirement fully, otherwise typescript compile would\n   * be complaining.\n   **/\n  static from(possibleDtoObject: MyFloatClassDtoType) {\n    return new MyFloatClassDto(possibleDtoObject);\n  }\n  /**\n   * Creates an instance of MyFloatClassDto, and partialDtoObject\n   * needs to satisfy the type, but partially, and rest of the content would\n   * be constructed according to data types and nullability.\n   **/\n  static with(partialDtoObject: PartialDeep<MyFloatClassDtoType>) {\n    return new MyFloatClassDto(partialDtoObject);\n  }\n  copyWith(\n    partial: PartialDeep<MyFloatClassDtoType>,\n  ): InstanceType<typeof MyFloatClassDto> {\n    return new MyFloatClassDto({ ...this.toJSON(), ...partial });\n  }\n  clone(): InstanceType<typeof MyFloatClassDto> {\n    return new MyFloatClassDto(this.toJSON());\n  }\n}\nexport abstract class MyFloatClassDtoFactory {\n  abstract create(data: unknown): MyFloatClassDto;\n}\ntype PartialDeep<T> = {\n  [P in keyof T]?: T[P] extends Array<infer U>\n    ? Array<PartialDeep<U>>\n    : T[P] extends object\n      ? PartialDeep<T[P]>\n      : T[P];\n};\n/**\n * The base type definition for myFloatClassDto\n **/\nexport type MyFloatClassDtoType = {\n  /**\n   *\n   * @type {number}\n   **/\n  nullableFloatWithDefault?: number;\n  /**\n   *\n   * @type {number}\n   **/\n  nullableFloatWithoutDefault?: number;\n};\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace MyFloatClassDtoType {}\n\n'})}),"\n",(0,l.jsxs)(t.blockquote,{children:["\n",(0,l.jsxs)(t.p,{children:["Emi also supports ",(0,l.jsx)(t.code,{children:"float32"}),", but ",(0,l.jsx)(t.code,{children:"float64"})," is the default for decimals."]}),"\n"]})]})}function f(n={}){const{wrapper:t}={...(0,o.R)(),...n.components};return t?(0,l.jsx)(t,{...n,children:(0,l.jsx)(c,{...n})}):c(n)}},8453:(n,t,e)=>{e.d(t,{R:()=>s,x:()=>i});var a=e(6540);const l={},o=a.createContext(l);function s(n){const t=a.useContext(o);return a.useMemo(function(){return"function"==typeof n?n(t):{...t,...n}},[t,n])}function i(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(l):n.components||l:s(n.components),a.createElement(o.Provider,{value:t},n.children)}}}]);