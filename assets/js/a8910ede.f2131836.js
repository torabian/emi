"use strict";(self.webpackChunkemi_web=self.webpackChunkemi_web||[]).push([[562],{7788:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"js/emi-static-fields","title":"Static fields path generation","description":"In Javascript world, often you need to set a variable using a json path, for example using \'lodash\' or \'formik\' libraries. This is very common way to set value of a variable, deep inside an object, array, or combination.","source":"@site/docs/js/emi-static-fields.mdx","sourceDirName":"js","slug":"/js/emi-static-fields","permalink":"/emi/docs/js/emi-static-fields","draft":false,"unlisted":false,"editUrl":"https://github.com/torabian/emi/tree/main/emi-web/docs/js/emi-static-fields.mdx","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Nullable object vs non-nullable","permalink":"/emi/docs/js/emi-nullable-object"},"next":{"title":"Emi string data type","permalink":"/emi/docs/js/emi-string-data-type"}}');var s=n(4848),o=n(8453);const a={sidebar_position:4},r="Static fields path generation",l={},c=[{value:"Issue with the code",id:"issue-with-the-code",level:2},{value:"How Emi static generation would solve this?",id:"how-emi-static-generation-would-solve-this",level:2}];function d(e){const t={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"static-fields-path-generation",children:"Static fields path generation"})}),"\n",(0,s.jsx)(t.p,{children:"In Javascript world, often you need to set a variable using a json path, for example using 'lodash' or 'formik' libraries. This is very common way to set value of a variable, deep inside an object, array, or combination."}),"\n",(0,s.jsx)(t.p,{children:"Let's assume the following code:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"const form = {\n  firstName: 'Ali',\n  loginHistory: [\n    {\n      time: new Date(),\n      data: {\n        ipAddress: '0.0.0.0',\n      } \n    }\n  ]\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Now, let's call the ",(0,s.jsx)(t.code,{children:"lodash.set(field, value)"})," function on the following code:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"import { set } from 'lodash';\n\nset(form, 'loginHistory[0].data.ipAddress', '192.168.1.1')\n"})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.em,{children:"A side note is you might ask why not set 'form.loginHistory[0].data.ipAddress = \"192.168.1.1' instead,\nin javascript world it's very common to use the path selector, in forms context, or when you do not have access\nto whole flow."})}),"\n",(0,s.jsx)(t.h2,{id:"issue-with-the-code",children:"Issue with the code"}),"\n",(0,s.jsxs)(t.p,{children:["As we called ",(0,s.jsx)(t.code,{children:"set"})," function with string path finder, this path might be changed over time, and\njavascript compiler might silently continue to set that form, and it's hard to debug.\nIf the ",(0,s.jsx)(t.code,{children:"form.loginHistory"})," becomes ",(0,s.jsx)(t.code,{children:"form.loginHistories"}),", then still some part of code still\ntries to set the address in a wrong location."]}),"\n",(0,s.jsx)(t.h2,{id:"how-emi-static-generation-would-solve-this",children:"How Emi static generation would solve this?"}),"\n",(0,s.jsxs)(t.p,{children:["When defining a model with Emi, compiler generates a ",(0,s.jsx)(t.code,{children:"static Fields = ... "})," statement in each sub class,\nand automatically connect the path in depth. Let's assume the following schema, this time written in Emi."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"- name: firstName\n  type: string\n- name: loginHistory\n  type: array\n  fields:\n    - name: time\n      type: string\n    - name: data\n      type: object\n      fields:\n        - name: ipAddress\n          type: string\n\n"})}),"\n",(0,s.jsxs)(t.p,{children:["And as you can see in the generated code there are ",(0,s.jsx)(t.code,{children:"static get Fields()"})," statements, which instead\nof setting string, now you can:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"import { set } from 'lodash';\n\nset(form, at(Anonymouse.Fields.loginHistory.data.ipAddress, 0), '192.168.1.1')\n"})}),"\n",(0,s.jsx)(t.p,{children:"Now in case the model changes, compiler would complain, and there is zero chance to modify no existing fields.\nFew notes to remember:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"When a field is object or array (and all similar types), the field itself appears twice, first with $ sign,\nwhich is representing the string field, and another time as the name of field, which would reference the other\nclass representing the sub class, or original reference in case of Dto or Entity."}),"\n",(0,s.jsxs)(t.li,{children:["In javascript core library, there is a ",(0,s.jsx)(t.code,{children:"at"})," function, which would help to resolve the array string paths. You can\npass number as many as you want, and it would replace [",":i","] statements to have proper index selected."]}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:'import { withPrefix } from "./sdk/common/withPrefix";\n\n'})})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>r});var i=n(6540);const s={},o=i.createContext(s);function a(e){const t=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);