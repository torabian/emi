"use strict";(self.webpackChunkemi_web=self.webpackChunkemi_web||[]).push([[627],{8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var s=t(6540);const i={},d=s.createContext(i);function r(e){const n=s.useContext(d);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(d.Provider,{value:n},e.children)}},9988:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"emi-actions","title":"Emi Actions","description":"Actions is a crucial part of almost every software. Actions in empty basically functions, which get an input, and return output. They can be correspond to \'controllers\'","source":"@site/docs/emi-actions.mdx","sourceDirName":".","slug":"/emi-actions","permalink":"/docs/emi-actions","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/emi-actions.mdx","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Emi definitions","permalink":"/docs/emi-definitions"},"next":{"title":"Javascript(Type?) Compiler","permalink":"/docs/js/js-intro"}}');var i=t(4848),d=t(8453);const r={sidebar_position:4},o="Emi Actions",c={},a=[{value:"Defining actions overview",id:"defining-actions-overview",level:2},{value:"Actions properties",id:"actions-properties",level:2},{value:"Action methods",id:"action-methods",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,d.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"emi-actions",children:"Emi Actions"})}),"\n",(0,i.jsx)(n.p,{children:"Actions is a crucial part of almost every software. Actions in empty basically functions, which get an input, and return output. They can be correspond to 'controllers'\nin traditional API development, each action is basically an endpoint. Actions also can be called from other contexts than http, for example from cli."}),"\n",(0,i.jsx)(n.p,{children:"For most cases, actions help you to define 'get', 'post' ... actions, as well as 'reactive' which is a websocket, and 'sse', which stands for server side event."}),"\n",(0,i.jsx)(n.h2,{id:"defining-actions-overview",children:"Defining actions overview"}),"\n",(0,i.jsx)(n.p,{children:"As mentioned in the general definitions, actions is a part of module, which is an array, and allows developer to define multiple actions, as items. Each action must have a name, and that's basically enough for it to be compiled by different sub compilers in Emi project."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'name: sampleModule\nactions:\n  - name: getSinglePost\n    url: https://jsonplaceholder.typicode.com/posts/:id\n    cliName: get-single-post\n    method: get\n    description: Get\'s an specific post from the endpoint\n    out:\n      fields:\n        - name: userId\n          type: int64\n        - name: id\n          type: int64\n        - name: title\n          type: string\n        - name: body\n          type: string\n  - name: sampleSse\n    url: http://localhost:3000/stream\n    method: sse\n    description: SSE Sample\n    out:\n      fields:\n        - name: message\n          type: string\n  - name: webSocketOrgEcho\n    url: "wss://echo.websocket.org/.ws"\n    method: reactive\n    description: Websocket.org eco server, to send a json and recieve back\n    in:\n      fields:\n        - name: firstName\n          type: string\n        - name: lastName\n          type: string\n    out:\n      fields:\n        - name: lastName\n          type: string\n\n'})}),"\n",(0,i.jsx)(n.h2,{id:"actions-properties",children:"Actions properties"}),"\n",(0,i.jsx)(n.p,{children:"Each action within a module needs to have a camel case name, and needs to be unique. The other properties are optional. Nevertheless, 'in', 'out', 'method' and 'url' are the most common properties of an action which you'll set as a developer.\r\nDepending on your use case, you might not need all features, or they might not be used by the sub compilers."}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Property"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"name"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:"General name of the action used for generating code and CLI commands"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"cliName"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:"Overrides the CLI action name if specified otherwise defaults to Name"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"actionAliases"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"array"})}),(0,i.jsx)(n.td,{children:"CLI command aliases for shorter action names"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"url"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:"HTTP route of the action; if not specified the action is CLI-only"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"method"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:"HTTP method type including standard and Fireback-specific methods"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"binaryType"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:"Text by default for websocket"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"qs"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"array"})}),(0,i.jsx)(n.td,{children:"Type-safe query parameters for CLI and HTTP requests"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"dataChannels"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"array"})}),(0,i.jsx)(n.td,{children:"Data channels in a typesafe mode in case of webrtc"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"description"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:"Action description used in API specs and documentation"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"format"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:"Higher-level request format such as POST_ONE PATCH_ONE"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"in"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"undefined"})}),(0,i.jsx)(n.td,{children:"Request body definition similar to HTTP request body"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"out"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"undefined"})}),(0,i.jsx)(n.td,{children:"Response body definition similar to HTTP response body"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"security"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"undefined"})}),(0,i.jsx)(n.td,{children:"Defines access control similar to middleware checking permissions"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"qsMode"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"string"})}),(0,i.jsx)(n.td,{children:"undefined"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"action-methods",children:"Action methods"}),"\n",(0,i.jsxs)(n.p,{children:["Emi allows for standard http methods, as well as some extra which will be converted to different protocols.\r\nCurrently supported the actions and methods are the following: ",(0,i.jsx)(n.code,{children:"post"}),", ",(0,i.jsx)(n.code,{children:"patch"}),", ",(0,i.jsx)(n.code,{children:"put"}),", ",(0,i.jsx)(n.code,{children:"get"}),", ",(0,i.jsx)(n.code,{children:"delete"}),", ",(0,i.jsx)(n.code,{children:"webrtc"}),", ",(0,i.jsx)(n.code,{children:"reactive"}),", ",(0,i.jsx)(n.code,{children:"sse"}),". Calling for non-existing method, would resolve to http with the non-standard method."]})]})}function h(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);