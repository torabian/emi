"use strict";(self.webpackChunkemi_web=self.webpackChunkemi_web||[]).push([[966],{8453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>u});var l=t(6540);const a={},i=l.createContext(a);function s(n){const e=l.useContext(i);return l.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function u(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:s(n.components),l.createElement(i.Provider,{value:e},n.children)}},8697:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>r,contentTitle:()=>u,default:()=>c,frontMatter:()=>s,metadata:()=>l,toc:()=>o});const l=JSON.parse('{"id":"js/emi-int-data-type","title":"Emi integer data type","description":"Example schema:","source":"@site/docs/js/emi-int-data-type.mdx","sourceDirName":"js","slug":"/js/emi-int-data-type","permalink":"/emi/docs/js/emi-int-data-type","draft":false,"unlisted":false,"editUrl":"https://github.com/torabian/emi/tree/main/emi-web/docs/js/emi-int-data-type.mdx","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Emi boolean data type","permalink":"/emi/docs/js/emi-boolean-data-type"},"next":{"title":"Emi float64 data type","permalink":"/emi/docs/js/emi-float64-data-type"}}');var a=t(4848),i=t(8453);const s={sidebar_position:6},u="Emi integer data type",r={},o=[];function d(n){const e={blockquote:"blockquote",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"emi-integer-data-type",children:"Emi integer data type"})}),"\n",(0,a.jsx)(e.p,{children:"Example schema:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-yaml",children:"name: MyIntClass\nfields:\n  - name: intWithDefault\n    default: 42\n    type: int\n  - name: plainInt\n    type: int\n\n"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"int"})," maps to JavaScript ",(0,a.jsx)(e.code,{children:"number"}),", limited to safe 32-bit values."]}),"\n",(0,a.jsxs)(e.li,{children:["If no default provided, it defaults to ",(0,a.jsx)(e.code,{children:"0"}),"."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"int?"})," allows ",(0,a.jsx)(e.code,{children:"null"})," and ",(0,a.jsx)(e.code,{children:"undefined"}),", with ",(0,a.jsx)(e.code,{children:"undefined"})," as default."]}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:'/**\n * The base class definition for myIntClassDto\n **/\n\nexport class MyIntClassDto {\n  /**\n   *\n   * @type {number}\n   **/\n  #intWithDefault: number = 42;\n  /**\n   *\n   * @returns {number}\n   **/\n  get intWithDefault() {\n    return this[`#intWithDefault`];\n  }\n\n  /**\n   *\n   * @type {number}\n   **/\n\n  set intWithDefault(value: number) {\n    const correctType = typeof value === "number";\n    this["#intWithDefault"] = correctType ? value : Number(value);\n  }\n\n  setIntWithDefault(value: number) {\n    this["intWithDefault"] = value;\n\n    return this;\n  }\n\n  /**\n   *\n   * @type {number}\n   **/\n  #plainInt: number = 0;\n  /**\n   *\n   * @returns {number}\n   **/\n  get plainInt() {\n    return this[`#plainInt`];\n  }\n\n  /**\n   *\n   * @type {number}\n   **/\n\n  set plainInt(value: number) {\n    const correctType = typeof value === "number";\n    this["#plainInt"] = correctType ? value : Number(value);\n  }\n\n  setPlainInt(value: number) {\n    this["plainInt"] = value;\n\n    return this;\n  }\n\n  constructor(data: unknown) {\n    const d = data as Partial<MyIntClassDto>;\n\n    if (d[`intWithDefault`] !== undefined) {\n      this.intWithDefault = d[`#intWithDefault`];\n    }\n\n    if (d[`plainInt`] !== undefined) {\n      this.plainInt = d[`#plainInt`];\n    }\n  }\n}\n\nexport abstract class MyIntClassDtoFactory {\n  abstract create(data: unknown): MyIntClassDto;\n}\n\n/**\n * The base type definition for myIntClassDto\n **/\n\nexport type MyIntClassDtoType = {\n  /**\n   *\n   * @type {number}\n   **/\n  intWithDefault?: number;\n\n  /**\n   *\n   * @type {number}\n   **/\n  plainInt?: number;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace MyIntClassDtoType {}\n\n'})}),"\n",(0,a.jsx)(e.p,{children:"Nullable version:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-yaml",children:"name: MyIntClass\nfields:\n  - name: nullableIntWithDefault\n    default: 7\n    type: int?\n  - name: nullableIntWithoutDefault\n    type: int?\n\n"})}),"\n",(0,a.jsxs)(e.p,{children:["Defaults to ",(0,a.jsx)(e.code,{children:"undefined"}),", but you can assign ",(0,a.jsx)(e.code,{children:"0"}),", any number, or ",(0,a.jsx)(e.code,{children:"null"}),"."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-ts",children:'/**\n * The base class definition for myIntClassDto\n **/\n\nexport class MyIntClassDto {\n  /**\n   *\n   * @type {number}\n   **/\n  #nullableIntWithDefault?: number | null = 7;\n  /**\n   *\n   * @returns {number}\n   **/\n  get nullableIntWithDefault() {\n    return this[`#nullableIntWithDefault`];\n  }\n\n  /**\n   *\n   * @type {number}\n   **/\n\n  set nullableIntWithDefault(value: number) {\n    const correctType =\n      typeof value === "number" || value === undefined || value === null;\n    this["#nullableIntWithDefault"] = correctType ? value : Number(value);\n  }\n\n  setNullableIntWithDefault(value: number) {\n    this["nullableIntWithDefault"] = value;\n\n    return this;\n  }\n\n  /**\n   *\n   * @type {number}\n   **/\n  #nullableIntWithoutDefault?: number | null = undefined;\n  /**\n   *\n   * @returns {number}\n   **/\n  get nullableIntWithoutDefault() {\n    return this[`#nullableIntWithoutDefault`];\n  }\n\n  /**\n   *\n   * @type {number}\n   **/\n\n  set nullableIntWithoutDefault(value: number) {\n    const correctType =\n      typeof value === "number" || value === undefined || value === null;\n    this["#nullableIntWithoutDefault"] = correctType ? value : Number(value);\n  }\n\n  setNullableIntWithoutDefault(value: number) {\n    this["nullableIntWithoutDefault"] = value;\n\n    return this;\n  }\n\n  constructor(data: unknown) {\n    const d = data as Partial<MyIntClassDto>;\n\n    if (d[`nullableIntWithDefault`] !== undefined) {\n      this.nullableIntWithDefault = d[`#nullableIntWithDefault`];\n    }\n\n    if (d[`nullableIntWithoutDefault`] !== undefined) {\n      this.nullableIntWithoutDefault = d[`#nullableIntWithoutDefault`];\n    }\n  }\n}\n\nexport abstract class MyIntClassDtoFactory {\n  abstract create(data: unknown): MyIntClassDto;\n}\n\n/**\n * The base type definition for myIntClassDto\n **/\n\nexport type MyIntClassDtoType = {\n  /**\n   *\n   * @type {number}\n   **/\n  nullableIntWithDefault?: number;\n\n  /**\n   *\n   * @type {number}\n   **/\n  nullableIntWithoutDefault?: number;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace MyIntClassDtoType {}\n\n'})}),"\n",(0,a.jsxs)(e.blockquote,{children:["\n",(0,a.jsxs)(e.p,{children:["Besides ",(0,a.jsx)(e.code,{children:"int"})," and ",(0,a.jsx)(e.code,{children:"int?"}),", Emi also supports ",(0,a.jsx)(e.code,{children:"int32"}),", ",(0,a.jsx)(e.code,{children:"int32?"}),", ",(0,a.jsx)(e.code,{children:"int64"}),", and ",(0,a.jsx)(e.code,{children:"int64?"})," types."]}),"\n"]})]})}function c(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(d,{...n})}):d(n)}}}]);