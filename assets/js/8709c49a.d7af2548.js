"use strict";(self.webpackChunkemi_web=self.webpackChunkemi_web||[]).push([[966],{8453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>r});var a=t(6540);const l={},i=a.createContext(l);function s(n){const e=a.useContext(i);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(l):n.components||l:s(n.components),a.createElement(i.Provider,{value:e},n.children)}},8697:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>u,contentTitle:()=>r,default:()=>c,frontMatter:()=>s,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"js/emi-int-data-type","title":"Emi integer data type","description":"Example schema:","source":"@site/docs/js/emi-int-data-type.mdx","sourceDirName":"js","slug":"/js/emi-int-data-type","permalink":"/emi/docs/js/emi-int-data-type","draft":false,"unlisted":false,"editUrl":"https://github.com/torabian/emi/tree/main/emi-web/docs/js/emi-int-data-type.mdx","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Emi boolean data type","permalink":"/emi/docs/js/emi-boolean-data-type"},"next":{"title":"Emi float64 data type","permalink":"/emi/docs/js/emi-float64-data-type"}}');var l=t(4848),i=t(8453);const s={sidebar_position:6},r="Emi integer data type",u={},o=[];function d(n){const e={blockquote:"blockquote",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...n.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(e.header,{children:(0,l.jsx)(e.h1,{id:"emi-integer-data-type",children:"Emi integer data type"})}),"\n",(0,l.jsx)(e.p,{children:"Example schema:"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-yaml",children:"name: MyIntClass\nfields:\n  - name: intWithDefault\n    default: 42\n    type: int\n  - name: plainInt\n    type: int\n\n"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"int"})," maps to JavaScript ",(0,l.jsx)(e.code,{children:"number"}),", limited to safe 32-bit values."]}),"\n",(0,l.jsxs)(e.li,{children:["If no default provided, it defaults to ",(0,l.jsx)(e.code,{children:"0"}),"."]}),"\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"int?"})," allows ",(0,l.jsx)(e.code,{children:"null"})," and ",(0,l.jsx)(e.code,{children:"undefined"}),", with ",(0,l.jsx)(e.code,{children:"undefined"})," as default."]}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:'/**\n * The base class definition for myIntClassDto\n **/\nexport class MyIntClassDto {\n  /**\n   *\n   * @type {number}\n   **/\n  #intWithDefault: number = 42;\n  /**\n   *\n   * @returns {number}\n   **/\n  get intWithDefault() {\n    return this.#intWithDefault;\n  }\n  /**\n   *\n   * @type {number}\n   **/\n  set intWithDefault(value: number) {\n    const correctType = typeof value === "number";\n    const parsedValue = correctType ? value : Number(value);\n    if (!Number.isNaN(parsedValue)) {\n      this.#intWithDefault = parsedValue;\n    }\n  }\n  setIntWithDefault(value: number) {\n    this.intWithDefault = value;\n    return this;\n  }\n  /**\n   *\n   * @type {number}\n   **/\n  #plainInt: number = 0;\n  /**\n   *\n   * @returns {number}\n   **/\n  get plainInt() {\n    return this.#plainInt;\n  }\n  /**\n   *\n   * @type {number}\n   **/\n  set plainInt(value: number) {\n    const correctType = typeof value === "number";\n    const parsedValue = correctType ? value : Number(value);\n    if (!Number.isNaN(parsedValue)) {\n      this.#plainInt = parsedValue;\n    }\n  }\n  setPlainInt(value: number) {\n    this.plainInt = value;\n    return this;\n  }\n  constructor(data: unknown) {\n    if (data === null || data === undefined) {\n      return;\n    }\n    if (typeof data === "string") {\n      this.applyFromObject(JSON.parse(data));\n    } else if (this.#isJsonAppliable(data)) {\n      this.applyFromObject(data);\n    } else {\n      throw new Error(\n        "Instance cannot be created on an unknown value, check the content being passed. got: " +\n          typeof data,\n      );\n    }\n  }\n  #isJsonAppliable(obj: unknown) {\n    const g = globalThis as any;\n    const isBuffer =\n      typeof g.Buffer !== "undefined" &&\n      typeof g.Buffer.isBuffer === "function" &&\n      g.Buffer.isBuffer(obj);\n    const isBlob = typeof g.Blob !== "undefined" && obj instanceof g.Blob;\n    return (\n      obj &&\n      typeof obj === "object" &&\n      !Array.isArray(obj) &&\n      !isBuffer &&\n      !(obj instanceof ArrayBuffer) &&\n      !isBlob\n    );\n  }\n  /**\n   * casts the fields of a javascript object into the class properties one by one\n   **/\n  applyFromObject(data = {}) {\n    const d = data as Partial<MyIntClassDto>;\n    if (d.intWithDefault !== undefined) {\n      this.intWithDefault = d.intWithDefault;\n    }\n    if (d.plainInt !== undefined) {\n      this.plainInt = d.plainInt;\n    }\n  }\n  /**\n   *\tSpecial toJSON override, since the field are private,\n   *\tJson stringify won\'t see them unless we mention it explicitly.\n   **/\n  toJSON() {\n    return {\n      intWithDefault: this.#intWithDefault,\n      plainInt: this.#plainInt,\n    };\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  static get Fields() {\n    return {\n      intWithDefault: "intWithDefault",\n      plainInt: "plainInt",\n    };\n  }\n}\nexport abstract class MyIntClassDtoFactory {\n  abstract create(data: unknown): MyIntClassDto;\n}\n/**\n * The base type definition for myIntClassDto\n **/\nexport type MyIntClassDtoType = {\n  /**\n   *\n   * @type {number}\n   **/\n  intWithDefault: number;\n  /**\n   *\n   * @type {number}\n   **/\n  plainInt: number;\n};\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace MyIntClassDtoType {}\n\n'})}),"\n",(0,l.jsx)(e.p,{children:"Nullable version:"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-yaml",children:"name: MyIntClass\nfields:\n  - name: nullableIntWithDefault\n    default: 7\n    type: int?\n  - name: nullableIntWithoutDefault\n    type: int?\n\n"})}),"\n",(0,l.jsxs)(e.p,{children:["Defaults to ",(0,l.jsx)(e.code,{children:"undefined"}),", but you can assign ",(0,l.jsx)(e.code,{children:"0"}),", any number, or ",(0,l.jsx)(e.code,{children:"null"}),"."]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:'/**\n * The base class definition for myIntClassDto\n **/\nexport class MyIntClassDto {\n  /**\n   *\n   * @type {number}\n   **/\n  #nullableIntWithDefault?: number | null = 7;\n  /**\n   *\n   * @returns {number}\n   **/\n  get nullableIntWithDefault() {\n    return this.#nullableIntWithDefault;\n  }\n  /**\n   *\n   * @type {number}\n   **/\n  set nullableIntWithDefault(value: number | null | undefined) {\n    const correctType =\n      typeof value === "number" || value === undefined || value === null;\n    const parsedValue = correctType ? value : Number(value);\n    if (!Number.isNaN(parsedValue)) {\n      this.#nullableIntWithDefault = parsedValue;\n    }\n  }\n  setNullableIntWithDefault(value: number | null | undefined) {\n    this.nullableIntWithDefault = value;\n    return this;\n  }\n  /**\n   *\n   * @type {number}\n   **/\n  #nullableIntWithoutDefault?: number | null = undefined;\n  /**\n   *\n   * @returns {number}\n   **/\n  get nullableIntWithoutDefault() {\n    return this.#nullableIntWithoutDefault;\n  }\n  /**\n   *\n   * @type {number}\n   **/\n  set nullableIntWithoutDefault(value: number | null | undefined) {\n    const correctType =\n      typeof value === "number" || value === undefined || value === null;\n    const parsedValue = correctType ? value : Number(value);\n    if (!Number.isNaN(parsedValue)) {\n      this.#nullableIntWithoutDefault = parsedValue;\n    }\n  }\n  setNullableIntWithoutDefault(value: number | null | undefined) {\n    this.nullableIntWithoutDefault = value;\n    return this;\n  }\n  constructor(data: unknown) {\n    if (data === null || data === undefined) {\n      return;\n    }\n    if (typeof data === "string") {\n      this.applyFromObject(JSON.parse(data));\n    } else if (this.#isJsonAppliable(data)) {\n      this.applyFromObject(data);\n    } else {\n      throw new Error(\n        "Instance cannot be created on an unknown value, check the content being passed. got: " +\n          typeof data,\n      );\n    }\n  }\n  #isJsonAppliable(obj: unknown) {\n    const g = globalThis as any;\n    const isBuffer =\n      typeof g.Buffer !== "undefined" &&\n      typeof g.Buffer.isBuffer === "function" &&\n      g.Buffer.isBuffer(obj);\n    const isBlob = typeof g.Blob !== "undefined" && obj instanceof g.Blob;\n    return (\n      obj &&\n      typeof obj === "object" &&\n      !Array.isArray(obj) &&\n      !isBuffer &&\n      !(obj instanceof ArrayBuffer) &&\n      !isBlob\n    );\n  }\n  /**\n   * casts the fields of a javascript object into the class properties one by one\n   **/\n  applyFromObject(data = {}) {\n    const d = data as Partial<MyIntClassDto>;\n    if (d.nullableIntWithDefault !== undefined) {\n      this.nullableIntWithDefault = d.nullableIntWithDefault;\n    }\n    if (d.nullableIntWithoutDefault !== undefined) {\n      this.nullableIntWithoutDefault = d.nullableIntWithoutDefault;\n    }\n  }\n  /**\n   *\tSpecial toJSON override, since the field are private,\n   *\tJson stringify won\'t see them unless we mention it explicitly.\n   **/\n  toJSON() {\n    return {\n      nullableIntWithDefault: this.#nullableIntWithDefault,\n      nullableIntWithoutDefault: this.#nullableIntWithoutDefault,\n    };\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  static get Fields() {\n    return {\n      nullableIntWithDefault: "nullableIntWithDefault",\n      nullableIntWithoutDefault: "nullableIntWithoutDefault",\n    };\n  }\n}\nexport abstract class MyIntClassDtoFactory {\n  abstract create(data: unknown): MyIntClassDto;\n}\n/**\n * The base type definition for myIntClassDto\n **/\nexport type MyIntClassDtoType = {\n  /**\n   *\n   * @type {number}\n   **/\n  nullableIntWithDefault?: number;\n  /**\n   *\n   * @type {number}\n   **/\n  nullableIntWithoutDefault?: number;\n};\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace MyIntClassDtoType {}\n\n'})}),"\n",(0,l.jsxs)(e.blockquote,{children:["\n",(0,l.jsxs)(e.p,{children:["Besides ",(0,l.jsx)(e.code,{children:"int"})," and ",(0,l.jsx)(e.code,{children:"int?"}),", Emi also supports ",(0,l.jsx)(e.code,{children:"int32"}),", ",(0,l.jsx)(e.code,{children:"int32?"}),", ",(0,l.jsx)(e.code,{children:"int64"}),", and ",(0,l.jsx)(e.code,{children:"int64?"})," types."]}),"\n"]})]})}function c(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,l.jsx)(e,{...n,children:(0,l.jsx)(d,{...n})}):d(n)}}}]);