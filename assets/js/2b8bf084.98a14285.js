"use strict";(self.webpackChunkemi_web=self.webpackChunkemi_web||[]).push([[279],{5263:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"js/emi-complex-types","title":"Complex Types in Emi","description":"In Emi modules, you can define complexes as reusable types. Each complex requires a class name and a location where it should be imported from.","source":"@site/docs/js/emi-complex-types.mdx","sourceDirName":"js","slug":"/js/emi-complex-types","permalink":"/emi/docs/js/emi-complex-types","draft":false,"unlisted":false,"editUrl":"https://github.com/torabian/emi/tree/main/emi-web/docs/js/emi-complex-types.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Emi array data type","permalink":"/emi/docs/js/emi-array-data-type"}}');var a=t(4848),o=t(8453);const i={},r="Complex Types in Emi",l={},c=[{value:"Sample module",id:"sample-module",level:2},{value:"Example Generated Code",id:"example-generated-code",level:2},{value:"Notes",id:"notes",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"complex-types-in-emi",children:"Complex Types in Emi"})}),"\n",(0,a.jsxs)(n.p,{children:["In Emi modules, you can define ",(0,a.jsx)(n.strong,{children:"complexes"})," as reusable types. Each complex requires a class name and a location where it should be imported from.\r\nInstead of using primitive types like ",(0,a.jsx)(n.code,{children:"number"})," or ",(0,a.jsx)(n.code,{children:"string"}),", you can specify ",(0,a.jsx)(n.code,{children:"complex: ClassName"})," inside the action field definition."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["If you prefix the complex with ",(0,a.jsx)(n.strong,{children:'"+"'}),", like ",(0,a.jsx)(n.code,{children:"+ClassName"}),", Emi will automatically instantiate the value when parsing the response."]}),"\n",(0,a.jsxs)(n.li,{children:["Built-in types such as ",(0,a.jsx)(n.code,{children:"Date"})," can be used directly as complexes."]}),"\n",(0,a.jsxs)(n.li,{children:["User-defined types such as ",(0,a.jsx)(n.code,{children:"Money"})," need to be registered in the ",(0,a.jsx)(n.strong,{children:"complexes"})," array of your module."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"sample-module",children:"Sample module"}),"\n",(0,a.jsx)(n.p,{children:"Here you can see based on defining 2 complex fields, we are generating them as class instances"}),"\n",(0,a.jsx)(n.p,{children:"Example schema:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"name: emiComplexFields\ncomplexes:\n  - name: Money\n    location: ../some/directory/Money\nactions:\n  - name: sample\n    url: http://localhost:8081 (for test we use override)\n    method: post\n    description: Demo action that shows how complex types can be used in an action\n    out:\n      envelope: GResponse\n      fields:\n        - name: date\n          complex: +Date\n          description: Use javascript Date class as complex type\n        - name: money\n          complex: +Money\n          description: External money type\n\n"})}),"\n",(0,a.jsx)(n.h2,{id:"example-generated-code",children:"Example Generated Code"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'import { GResponse } from "./sdk/envelopes/index";\nimport { Money } from "../some/directory/Money";\nimport { buildUrl } from "./sdk/common/buildUrl";\nimport {\n  fetchx,\n  handleFetchResponse,\n  type TypedRequestInit,\n} from "./sdk/common/fetchx";\nimport { isPlausibleObject } from "./sdk/common/isPlausibleObject";\nimport { withPrefix } from "./sdk/common/withPrefix";\n/**\n * Action to communicate with the action sample\n */\nexport type SampleActionOptions = {\n  queryKey?: unknown[];\n  qs?: URLSearchParams;\n};\n/**\n * SampleAction\n */\nexport class SampleAction {\n  static URL = "http://localhost:8081 (for test we use override)";\n  static NewUrl = (qs?: URLSearchParams) =>\n    buildUrl(SampleAction.URL, undefined, qs);\n  static Method = "post";\n  static Fetch$ = async (\n    qs?: URLSearchParams,\n    init?: TypedRequestInit<unknown, unknown>,\n    overrideUrl?: string,\n  ) => {\n    return fetchx<GResponse<SampleActionRes>, unknown, unknown>(\n      overrideUrl ?? SampleAction.NewUrl(qs),\n      {\n        method: SampleAction.Method,\n        ...(init || {}),\n      },\n    );\n  };\n  static Fetch = async (\n    qs?: URLSearchParams,\n    init?: TypedRequestInit<unknown, unknown>,\n    onMessage?: (ev: MessageEvent) => void,\n    overrideUrl?: string,\n  ) => {\n    const res = await SampleAction.Fetch$(qs, init, overrideUrl);\n    return handleFetchResponse(\n      res,\n      (data) => {\n        const envelope = new GResponse<SampleActionRes>(data);\n        envelope.updatePayload(new SampleActionRes(envelope.getPayload()));\n        return envelope;\n      },\n      onMessage,\n      init?.signal,\n    );\n  };\n}\n/**\n * The base class definition for sampleActionRes\n **/\nexport class SampleActionRes {\n  /**\n   * Use javascript Date class as complex type\n   * @type {Date}\n   **/\n  #date: Date = null;\n  /**\n   * Use javascript Date class as complex type\n   * @returns {Date}\n   **/\n  get date() {\n    return this.#date;\n  }\n  /**\n   * Use javascript Date class as complex type\n   * @type {Date}\n   **/\n  set date(value: Date) {\n    if (value instanceof Date) {\n      this.#date = value;\n    } else {\n      this.#date = new Date(value);\n    }\n  }\n  setDate(value: Date) {\n    this.date = value;\n    return this;\n  }\n  /**\n   * External money type\n   * @type {Money}\n   **/\n  #money: Money = null;\n  /**\n   * External money type\n   * @returns {Money}\n   **/\n  get money() {\n    return this.#money;\n  }\n  /**\n   * External money type\n   * @type {Money}\n   **/\n  set money(value: Money) {\n    if (value instanceof Money) {\n      this.#money = value;\n    } else {\n      this.#money = new Money(value);\n    }\n  }\n  setMoney(value: Money) {\n    this.money = value;\n    return this;\n  }\n  constructor(data) {\n    if (data === null || data === undefined) {\n      return;\n    }\n    if (typeof data === "string") {\n      this.applyFromObject(JSON.parse(data));\n    } else if (isPlausibleObject(data)) {\n      this.applyFromObject(data);\n    } else {\n      throw new Error("Instance is not implemented.");\n    }\n  }\n  /**\n   * casts the fields of a javascript object into the class properties one by one\n   **/\n  applyFromObject(data = {}) {\n    const d = data as Partial<SampleActionRes>;\n    if (d.date !== undefined) {\n      this.date = d.date;\n    }\n    if (d.money !== undefined) {\n      this.money = d.money;\n    }\n  }\n  /**\n   *\tSpecial toJSON override, since the field are private,\n   *\tJson stringify won\'t see them unless we mention it explicitly.\n   **/\n  toJSON() {\n    return {\n      date: this.#date,\n      money: this.#money,\n    };\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  static get Fields() {\n    return {\n      date: "date",\n      money: "money",\n    };\n  }\n}\nexport abstract class SampleActionResFactory {\n  abstract create(data: unknown): SampleActionRes;\n}\n/**\n * The base type definition for sampleActionRes\n **/\nexport type SampleActionResType = {\n  /**\n   * Use javascript Date class as complex type\n   * @type {Date}\n   **/\n  date?: Date;\n  /**\n   * External money type\n   * @type {Money}\n   **/\n  money?: Money;\n};\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace SampleActionResType {}\n\n'})}),"\n",(0,a.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"Date"})," is treated as a built-in complex and is not imported."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"Money"})," is imported from the given location and instantiated when assigned."]}),"\n",(0,a.jsxs)(n.li,{children:["The generated setters (",(0,a.jsx)(n.code,{children:"setDate"}),", ",(0,a.jsx)(n.code,{children:"setMoney"}),") return ",(0,a.jsx)(n.code,{children:"this"})," so you can chain assignments."]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>r});var s=t(6540);const a={},o=s.createContext(a);function i(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);