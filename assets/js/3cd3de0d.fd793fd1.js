"use strict";(self.webpackChunkemi_web=self.webpackChunkemi_web||[]).push([[371],{8066:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>u,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>r});const a=JSON.parse('{"id":"js/emi-float64-data-type","title":"Emi float64 data type","description":"Example schema:","source":"@site/docs/js/emi-float64-data-type.mdx","sourceDirName":"js","slug":"/js/emi-float64-data-type","permalink":"/emi/docs/js/emi-float64-data-type","draft":false,"unlisted":false,"editUrl":"https://github.com/torabian/emi/tree/main/emi-web/docs/js/emi-float64-data-type.mdx","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"Emi integer data type","permalink":"/emi/docs/js/emi-int-data-type"},"next":{"title":"Emi object data type","permalink":"/emi/docs/js/emi-object-data-type"}}');var l=t(4848),o=t(8453);const i={sidebar_position:7},s="Emi float64 data type",u={},r=[];function f(n){const e={blockquote:"blockquote",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...n.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(e.header,{children:(0,l.jsx)(e.h1,{id:"emi-float64-data-type",children:"Emi float64 data type"})}),"\n",(0,l.jsx)(e.p,{children:"Example schema:"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-yaml",children:"name: MyFloatClass\nfields:\n  - name: floatWithDefault\n    default: 3.14\n    type: float64\n  - name: plainFloat\n    type: float64\n\n"})}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"float64"})," maps to JavaScript ",(0,l.jsx)(e.code,{children:"number"})," with double precision."]}),"\n",(0,l.jsxs)(e.li,{children:["Default is ",(0,l.jsx)(e.code,{children:"0.0"})," if not specified."]}),"\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.code,{children:"float64?"})," allows ",(0,l.jsx)(e.code,{children:"null"})," and ",(0,l.jsx)(e.code,{children:"undefined"}),", defaulting to ",(0,l.jsx)(e.code,{children:"undefined"}),"."]}),"\n"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:'/**\n * The base class definition for myFloatClassDto\n **/\nexport class MyFloatClassDto {\n  /**\n   *\n   * @type {number}\n   **/\n  #floatWithDefault: number = 3.14;\n  /**\n   *\n   * @returns {number}\n   **/\n  get floatWithDefault() {\n    return this.#floatWithDefault;\n  }\n  /**\n   *\n   * @type {number}\n   **/\n  set floatWithDefault(value: number) {}\n  setFloatWithDefault(value: number) {\n    this.floatWithDefault = value;\n    return this;\n  }\n  /**\n   *\n   * @type {number}\n   **/\n  #plainFloat: number = 0.0;\n  /**\n   *\n   * @returns {number}\n   **/\n  get plainFloat() {\n    return this.#plainFloat;\n  }\n  /**\n   *\n   * @type {number}\n   **/\n  set plainFloat(value: number) {}\n  setPlainFloat(value: number) {\n    this.plainFloat = value;\n    return this;\n  }\n  constructor(data: unknown) {\n    if (data === null || data === undefined) {\n      return;\n    }\n    if (typeof data === "string") {\n      this.applyFromObject(JSON.parse(data));\n    } else if (this.#isJsonAppliable(data)) {\n      this.applyFromObject(data);\n    } else {\n      throw new Error(\n        "Instance cannot be created on an unknown value, check the content being passed. got: " +\n          typeof data,\n      );\n    }\n  }\n  #isJsonAppliable(obj: unknown) {\n    const g = globalThis as any;\n    const isBuffer =\n      typeof g.Buffer !== "undefined" &&\n      typeof g.Buffer.isBuffer === "function" &&\n      g.Buffer.isBuffer(obj);\n    const isBlob = typeof g.Blob !== "undefined" && obj instanceof g.Blob;\n    return (\n      obj &&\n      typeof obj === "object" &&\n      !Array.isArray(obj) &&\n      !isBuffer &&\n      !(obj instanceof ArrayBuffer) &&\n      !isBlob\n    );\n  }\n  /**\n   * casts the fields of a javascript object into the class properties one by one\n   **/\n  applyFromObject(data = {}) {\n    const d = data as Partial<MyFloatClassDto>;\n    if (d.floatWithDefault !== undefined) {\n      this.floatWithDefault = d.floatWithDefault;\n    }\n    if (d.plainFloat !== undefined) {\n      this.plainFloat = d.plainFloat;\n    }\n  }\n  /**\n   *\tSpecial toJSON override, since the field are private,\n   *\tJson stringify won\'t see them unless we mention it explicitly.\n   **/\n  toJSON() {\n    return {\n      floatWithDefault: this.#floatWithDefault,\n      plainFloat: this.#plainFloat,\n    };\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  static get Fields() {\n    return {\n      floatWithDefault: "floatWithDefault",\n      plainFloat: "plainFloat",\n    };\n  }\n}\nexport abstract class MyFloatClassDtoFactory {\n  abstract create(data: unknown): MyFloatClassDto;\n}\n/**\n * The base type definition for myFloatClassDto\n **/\nexport type MyFloatClassDtoType = {\n  /**\n   *\n   * @type {number}\n   **/\n  floatWithDefault: number;\n  /**\n   *\n   * @type {number}\n   **/\n  plainFloat: number;\n};\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace MyFloatClassDtoType {}\n\n'})}),"\n",(0,l.jsx)(e.p,{children:"Nullable version:"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-yaml",children:"name: MyFloatClass\nfields:\n  - name: nullableFloatWithDefault\n    default: 1.23\n    type: float64?\n  - name: nullableFloatWithoutDefault\n    type: float64?\n\n"})}),"\n",(0,l.jsxs)(e.p,{children:["Defaults to ",(0,l.jsx)(e.code,{children:"undefined"}),", but you can assign any float value or ",(0,l.jsx)(e.code,{children:"null"}),"."]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-ts",children:'/**\n * The base class definition for myFloatClassDto\n **/\nexport class MyFloatClassDto {\n  /**\n   *\n   * @type {number}\n   **/\n  #nullableFloatWithDefault?: number | null = 1.23;\n  /**\n   *\n   * @returns {number}\n   **/\n  get nullableFloatWithDefault() {\n    return this.#nullableFloatWithDefault;\n  }\n  /**\n   *\n   * @type {number}\n   **/\n  set nullableFloatWithDefault(value: number | null | undefined) {\n    const correctType =\n      typeof value === "number" || value === undefined || value === null;\n    const parsedValue = correctType ? value : Number(value);\n    if (!Number.isNaN(parsedValue)) {\n      this.#nullableFloatWithDefault = parsedValue;\n    }\n  }\n  setNullableFloatWithDefault(value: number | null | undefined) {\n    this.nullableFloatWithDefault = value;\n    return this;\n  }\n  /**\n   *\n   * @type {number}\n   **/\n  #nullableFloatWithoutDefault?: number | null = undefined;\n  /**\n   *\n   * @returns {number}\n   **/\n  get nullableFloatWithoutDefault() {\n    return this.#nullableFloatWithoutDefault;\n  }\n  /**\n   *\n   * @type {number}\n   **/\n  set nullableFloatWithoutDefault(value: number | null | undefined) {\n    const correctType =\n      typeof value === "number" || value === undefined || value === null;\n    const parsedValue = correctType ? value : Number(value);\n    if (!Number.isNaN(parsedValue)) {\n      this.#nullableFloatWithoutDefault = parsedValue;\n    }\n  }\n  setNullableFloatWithoutDefault(value: number | null | undefined) {\n    this.nullableFloatWithoutDefault = value;\n    return this;\n  }\n  constructor(data: unknown) {\n    if (data === null || data === undefined) {\n      return;\n    }\n    if (typeof data === "string") {\n      this.applyFromObject(JSON.parse(data));\n    } else if (this.#isJsonAppliable(data)) {\n      this.applyFromObject(data);\n    } else {\n      throw new Error(\n        "Instance cannot be created on an unknown value, check the content being passed. got: " +\n          typeof data,\n      );\n    }\n  }\n  #isJsonAppliable(obj: unknown) {\n    const g = globalThis as any;\n    const isBuffer =\n      typeof g.Buffer !== "undefined" &&\n      typeof g.Buffer.isBuffer === "function" &&\n      g.Buffer.isBuffer(obj);\n    const isBlob = typeof g.Blob !== "undefined" && obj instanceof g.Blob;\n    return (\n      obj &&\n      typeof obj === "object" &&\n      !Array.isArray(obj) &&\n      !isBuffer &&\n      !(obj instanceof ArrayBuffer) &&\n      !isBlob\n    );\n  }\n  /**\n   * casts the fields of a javascript object into the class properties one by one\n   **/\n  applyFromObject(data = {}) {\n    const d = data as Partial<MyFloatClassDto>;\n    if (d.nullableFloatWithDefault !== undefined) {\n      this.nullableFloatWithDefault = d.nullableFloatWithDefault;\n    }\n    if (d.nullableFloatWithoutDefault !== undefined) {\n      this.nullableFloatWithoutDefault = d.nullableFloatWithoutDefault;\n    }\n  }\n  /**\n   *\tSpecial toJSON override, since the field are private,\n   *\tJson stringify won\'t see them unless we mention it explicitly.\n   **/\n  toJSON() {\n    return {\n      nullableFloatWithDefault: this.#nullableFloatWithDefault,\n      nullableFloatWithoutDefault: this.#nullableFloatWithoutDefault,\n    };\n  }\n  toString() {\n    return JSON.stringify(this);\n  }\n  static get Fields() {\n    return {\n      nullableFloatWithDefault: "nullableFloatWithDefault",\n      nullableFloatWithoutDefault: "nullableFloatWithoutDefault",\n    };\n  }\n}\nexport abstract class MyFloatClassDtoFactory {\n  abstract create(data: unknown): MyFloatClassDto;\n}\n/**\n * The base type definition for myFloatClassDto\n **/\nexport type MyFloatClassDtoType = {\n  /**\n   *\n   * @type {number}\n   **/\n  nullableFloatWithDefault?: number;\n  /**\n   *\n   * @type {number}\n   **/\n  nullableFloatWithoutDefault?: number;\n};\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace MyFloatClassDtoType {}\n\n'})}),"\n",(0,l.jsxs)(e.blockquote,{children:["\n",(0,l.jsxs)(e.p,{children:["Emi also supports ",(0,l.jsx)(e.code,{children:"float32"}),", but ",(0,l.jsx)(e.code,{children:"float64"})," is the default for decimals."]}),"\n"]})]})}function d(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,l.jsx)(e,{...n,children:(0,l.jsx)(f,{...n})}):f(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>s});var a=t(6540);const l={},o=a.createContext(l);function i(n){const e=a.useContext(o);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(l):n.components||l:i(n.components),a.createElement(o.Provider,{value:e},n.children)}}}]);